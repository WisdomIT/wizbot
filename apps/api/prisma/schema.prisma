// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum ChatbotFunctionType {
  API_QUERY
  API_CONFIG
  WIZBOT_CONFIG
}

enum ChatbotPermission {
  STREAMER
  MANAGER
  VIEWER
}

enum SongStatus {
  PLAYING
  PAUSED
  STOPPED
}

model Whitelist {
  id       Int    @id @default(autoincrement())
  nickname String
}

model Admin {
  id       Int    @id @default(autoincrement())
  nickname String @unique @db.VarChar(10)
  password String @db.VarChar(60)
}

model User {
  id                Int      @id @default(autoincrement())
  nickname          String
  songFeatureActive Boolean

  // OAuth credentials relationship (분리된 OAuth 정보)
  oauth             OAuthCredential?

  // Relations
  simpleCommands    ChatbotEchoCommand[]
  functionCommands  ChatbotFunctionCommand[]
  songs             Song[]
  songPlayback      SongPlayback?
  playlists         Playlist[]
  cafeChzzks        CafeChzzk[]
  cafeYoutubes      CafeYoutube[]
}

model OAuthCredential {
  id           Int    @id @default(autoincrement())
  userId       Int    @unique @db.Int
  accessToken  String @db.Text
  refreshToken String @db.Text
  tokenType    String @db.VarChar(20)  // 예: "Bearer"
  expiresIn    Int    @db.Int  // 예: 3600
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatbotEchoCommand {
  id       Int      @id @default(autoincrement())
  userId   Int
  command  String   @db.VarChar(20)
  response String   @db.Text

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatbotFunctionCommand {
  id         Int                  @id @default(autoincrement())
  userId     Int
  type       ChatbotFunctionType
  permission ChatbotPermission
  command    String               @db.VarChar(20)
  function   String               @db.VarChar(20)
  function2  String?              @db.VarChar(20)

  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Song {
  id            Int    @id @default(autoincrement())
  userId        Int
  youtubeId     String @db.VarChar(11) // 유튜브 영상 ID
  title         String @db.VarChar(150) // 영상 제목
  videoUploader String @db.VarChar(150) // 영상 게시자
  requester     String @db.VarChar(40) // 신청자
  order         Int    @db.Int // 순서

  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SongPlayback {
  id            Int        @id @default(autoincrement())
  userId        Int        @unique // 각 유저당 한 개의 재생정보
  status        SongStatus // 재생상태: PLAYING, PAUSED, STOPPED
  youtubeId     String?    @db.VarChar(11) // 유튜브 영상 ID
  title         String?    @db.VarChar(150) // 영상 제목
  videoUploader String?    @db.VarChar(150) // 영상 게시자
  requester     String?    @db.VarChar(40) // 신청자

  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Playlist {
  id       Int    @id @default(autoincrement())
  userId   Int
  name     String @db.VarChar(50)

  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items    PlaylistItem[]
}

model PlaylistItem {
  id            Int    @id @default(autoincrement())
  playlistId    Int
  youtubeId     String     @db.VarChar(11) // 유튜브 영상 ID
  title         String     @db.VarChar(150) // 영상 제목
  videoUploader String     @db.VarChar(150) // 영상 게시자
  order         Int     // 재생목록 내 순서

  playlist      Playlist   @relation(fields: [playlistId], references: [id], onDelete: Cascade)
}

model CafeChzzk {
  id         Int     @id @default(autoincrement())
  userId     Int
  channelId  String  @db.VarChar(32)
  background String  @db.Text
  title      String? @db.Text
  category   String? @db.Text
  openDate   String? @db.Text

  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CafeYoutube {
  id         Int     @id @default(autoincrement())
  userId     Int
  channelId  String  @db.VarChar(24)

  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}